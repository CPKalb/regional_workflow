{#

This is a Jinja-enabled Rocoto XML template. It is filled in using the
fill_template.py script, and is done automatically by the
generate_workflow.sh step of preparing a regional workflow configured
experiment.

See README.xml_templating.md for information on using the Templating mechanisms.
-#}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow [

<!--
Parameters needed by the job scheduler.
-->
<!ENTITY ACCOUNT       "{{ account }}">
<!ENTITY SCHED         "{{ sched }}">
<!ENTITY QUEUE_DEFAULT "{{ queue_default }}">
<!ENTITY QUEUE_HPSS    "{{ queue_hpss }}">
<!ENTITY QUEUE_FCST    "{{ queue_fcst }}">

<!--
Parameters to pass to slurm.
-->
<!ENTITY SLURM_NATIVE_CMD                      "{{ slurm_native_cmd }}">

<!--
Workflow task names.
-->
<!ENTITY MAKE_GRID_TN                          "{{ make_grid_tn }}">
<!ENTITY MAKE_OROG_TN                          "{{ make_orog_tn }}">
<!ENTITY MAKE_SFC_CLIMO_TN                     "{{ make_sfc_climo_tn }}">
<!ENTITY GET_EXTRN_ICS_TN                      "{{ get_extrn_ics_tn }}">
<!ENTITY GET_EXTRN_LBCS_TN                     "{{ get_extrn_lbcs_tn }}">
<!ENTITY MAKE_ICS_TN                           "{{ make_ics_tn }}">
<!ENTITY MAKE_LBCS_TN                          "{{ make_lbcs_tn }}">
<!ENTITY RUN_FCST_TN                           "{{ run_fcst_tn }}">
<!ENTITY RUN_POST_TN                           "{{ run_post_tn }}">
<!ENTITY GET_OBS_CCPA_TN                       "{{ get_obs_ccpa_tn }}">
<!ENTITY GET_OBS_NDAS_TN                       "{{ get_obs_ndas_tn }}">
<!ENTITY GET_OBS_MRMS_TN                       "{{ get_obs_mrms_tn }}">
<!ENTITY VX_TN                                 "{{ vx_tn }}">
<!ENTITY RUN_VXAUX_PB2NC_OBS_TN                "{{ run_vxaux_pb2nc_obs_tn }}">
<!ENTITY RUN_VXAUX_PCPCOMBINE_OBS_TN           "{{ run_vxaux_pcpcombine_obs_tn }}">
<!ENTITY RUN_VXAUX_PCPCOMBINE_FCST_TN          "{{ run_vxaux_pcpcombine_fcst_tn }}">
<!ENTITY RUN_VXDET_GRIDSTAT_TN                 "{{ run_vxdet_gridstat_tn }}">
<!ENTITY RUN_VXDET_POINTSTAT_TN                "{{ run_vxdet_pointstat_tn }}">
<!ENTITY RUN_VXENS_GEPES_GRIDDED_TN            "{{ run_vxens_gepes_gridded_tn }}">
<!ENTITY RUN_VXENS_GEPES_POINT_TN              "{{ run_vxens_gepes_point_tn }}">
<!ENTITY RUN_VXENS_GRIDSTAT_TN                 "{{ run_vxens_gridstat_tn }}">
<!ENTITY RUN_VXENS_POINTSTAT_TN                "{{ run_vxens_pointstat_tn }}">

{%- if include_old_vx_tasks_in_xml %}
<!ENTITY VX_RUN_OLD_VXDET_TASKS          "FALSE">
<!ENTITY VX_RUN_OLD_VXENS_TASKS          "FALSE">
<!ENTITY VX_GRIDSTAT_APCP01h_TN                "{{ vx_gridstat_apcp01h_tn }}">
<!ENTITY VX_GRIDSTAT_APCP03h_TN                "{{ vx_gridstat_apcp03h_tn }}">
<!ENTITY VX_GRIDSTAT_APCP06h_TN                "{{ vx_gridstat_apcp06h_tn }}">
<!ENTITY VX_GRIDSTAT_APCP24h_TN                "{{ vx_gridstat_apcp24h_tn }}">
<!ENTITY VX_GRIDSTAT_REFC_TN                   "{{ vx_gridstat_refc_tn }}">
<!ENTITY VX_GRIDSTAT_RETOP_TN                  "{{ vx_gridstat_retop_tn }}">
<!ENTITY VX_POINTSTAT_TN                       "{{ vx_pointstat_tn }}">
<!ENTITY VX_ENSGRID_TN                         "{{ vx_ensgrid_tn }}">
<!ENTITY VX_ENSGRID_APCP01h_TN                 "{{ vx_ensgrid_apcp01h_tn }}">
<!ENTITY VX_ENSGRID_REFC_TN                    "{{ vx_ensgrid_refc_tn }}">
<!ENTITY VX_ENSGRID_RETOP_TN                   "{{ vx_ensgrid_retop_tn }}">
<!ENTITY VX_ENSGRID_APCP03h_TN                 "{{ vx_ensgrid_apcp03h_tn }}">
<!ENTITY VX_ENSGRID_APCP06h_TN                 "{{ vx_ensgrid_apcp06h_tn }}">
<!ENTITY VX_ENSGRID_APCP24h_TN                 "{{ vx_ensgrid_apcp24h_tn }}">
<!ENTITY VX_ENSGRID_MEAN_TN                    "{{ vx_ensgrid_mean_tn }}">
<!ENTITY VX_ENSGRID_APCP01h_MEAN_TN            "{{ vx_ensgrid_apcp01h_mean_tn }}">
<!ENTITY VX_ENSGRID_APCP01h_PROB_TN            "{{ vx_ensgrid_apcp01h_prob_tn }}">
<!ENTITY VX_ENSGRID_APCP03h_MEAN_TN            "{{ vx_ensgrid_apcp03h_mean_tn }}">
<!ENTITY VX_ENSGRID_APCP03h_PROB_TN            "{{ vx_ensgrid_apcp03h_prob_tn }}">
<!ENTITY VX_ENSGRID_APCP06h_MEAN_TN            "{{ vx_ensgrid_apcp06h_mean_tn }}">
<!ENTITY VX_ENSGRID_APCP06h_PROB_TN            "{{ vx_ensgrid_apcp06h_prob_tn }}">
<!ENTITY VX_ENSGRID_APCP24h_MEAN_TN            "{{ vx_ensgrid_apcp24h_mean_tn }}">
<!ENTITY VX_ENSGRID_APCP24h_PROB_TN            "{{ vx_ensgrid_apcp24h_prob_tn }}">
<!ENTITY VX_ENSGRID_REFC_PROB_TN               "{{ vx_ensgrid_refc_prob_tn }}">
<!ENTITY VX_ENSGRID_RETOP_PROB_TN              "{{ vx_ensgrid_retop_prob_tn }}">
<!ENTITY VX_ENSPOINT_TN                        "{{ vx_enspoint_tn }}">
<!ENTITY VX_ENSPOINT_MEAN_TN                   "{{ vx_enspoint_mean_tn }}">
<!ENTITY VX_ENSPOINT_PROB_TN                   "{{ vx_enspoint_prob_tn }}">
{%- endif %}

<!--
Entity used to load the module file for each GET_OBS_* task.
-->
<!ENTITY GET_OBS                       "{{ get_obs }}">

<!--
Flags that specify whether to run the preprocessing and/or verification tasks.
-->
<!ENTITY RUN_TASK_MAKE_GRID       "{{ run_task_make_grid | upper }}">
<!ENTITY RUN_TASK_MAKE_OROG       "{{ run_task_make_orog | upper }}">
<!ENTITY RUN_TASK_MAKE_SFC_CLIMO  "{{ run_task_make_sfc_climo | upper }}">

<!--
Number of physical cores per node for the current machine.  This is used
below in the <nodesize> tag, but that tag is not clearly documented.  This
parameter may be unnecessary since each task now has its own variable that
specifies the number of processes per node being used (the PPN_... entities).
-->
<!ENTITY NCORES_PER_NODE "{{ ncores_per_node }}">

<!--
Directories and files.
-->
<!ENTITY JOBSDIR                  "{{ jobsdir }}">
<!ENTITY LOGDIR                   "{{ logdir }}">
<!ENTITY SCRIPTSDIR               "{{ scriptsdir }}">
<!ENTITY CYCLE_BASEDIR            "{{ cycle_basedir }}">
<!ENTITY GLOBAL_VAR_DEFNS_FP      "{{ global_var_defns_fp }}">
<!ENTITY LOAD_MODULES_RUN_TASK_FP "{{ load_modules_run_task_fp }}">
<!ENTITY CCPA_OBS_DIR             "{{ ccpa_obs_dir }}">
<!ENTITY MRMS_OBS_DIR             "{{ mrms_obs_dir }}">
<!ENTITY NDAS_OBS_DIR             "{{ ndas_obs_dir }}">

<!--
Reservation types.  Reservations specify the queue/partition and account
to use for a given task.  The "DEFAULT" reservation type is used for all 
tasks other than GET_EXTRN_ICS_TN, GET_EXTRN_LBCS_TN, and RUN_FCST_TN; 
the "HPSS" type is used for the GET_EXTRN_ICS_TN and GET_EXTRN_LBCS_TN 
tasks; and the "FCST" type is used for the RUN_FCST_TN task.
-->

{%- if partition_default is not none %}
<!ENTITY RSRV_DEFAULT "<account>&ACCOUNT;</account><queue>&QUEUE_DEFAULT;</queue><partition>{{ partition_default }}</partition>">
{%- else %}
<!ENTITY RSRV_DEFAULT "<account>&ACCOUNT;</account><queue>&QUEUE_DEFAULT;</queue>">
{%- endif %}
{%- if partition_hpss is not none %}
<!ENTITY RSRV_HPSS    "<account>&ACCOUNT;</account><queue>&QUEUE_HPSS;</queue><partition>{{ partition_hpss }}</partition>">
{%- else %}
<!ENTITY RSRV_HPSS    "<account>&ACCOUNT;</account><queue>&QUEUE_HPSS;</queue>">
{%- endif %}
{%- if partition_fcst is not none %}
<!ENTITY RSRV_FCST    "<account>&ACCOUNT;</account><queue>&QUEUE_FCST;</queue><partition>{{ partition_fcst }}</partition>">
{%- else %}
<!ENTITY RSRV_FCST    "<account>&ACCOUNT;</account><queue>&QUEUE_FCST;</queue>">
{%- endif %}

]>

<workflow realtime="F" scheduler="&SCHED;" cyclethrottle="20">
{# Double quotes are required inside the strftime! Expect an error from reading the template if using single quotes. #}
  <cycledef group="at_start">{{ cdate_first_cycl.strftime("%M %H %d %m %Y *") }}</cycledef>
{% for c in cycl_hrs %}
  <cycledef group="forecast">
  {%- set cdate_first=date_first_cycl ~ c ~ "00" -%}
  {%- set cdate_last=date_last_cycl ~ c ~ "00" -%}
  {{- cdate_first ~ " " ~ cdate_last ~ " " ~ cycl_freq -}}
  </cycledef>
{%- endfor %}

  <log>
    <cyclestr>&LOGDIR;/FV3LAM_wflow.log</cyclestr>
  </log>

<!-- 
The following command works to call the J-job for a given task (in this
case the MAKE_GRID_TN task) if in the script LOAD_MODULES_RUN_TASK_FP we 
do NOT call exec to run the J-job.  The command first sources the script
LOAD_MODULES_RUN_TASK_FP and then runs the J-job, so it is simpler than
calling exec and thus preferred if NCO accepts it.  Note that the portion
of the command that sources LOAD_MODULES_RUN_TASK_FP also passes an 
argument to it (the argument being the name of the task).  This works in
bash but it probably won't work in sh.

If this method is acceptable to NCO, then for clarity maybe we can
source LOAD_MODULES_RUN_TASK_FP within the J-job instead of here since
we are already sourcing other files in the J-job anyway.
-->
<!--
    <command>{ . &LOAD_MODULES_RUN_TASK_FP; "&MAKE_GRID_TN;";
               &JOBSDIR;/JREGIONAL_MAKE_GRID;
             }</command>
-->
<!--
The following command works if we call exec in LOAD_MODULES_RUN_TASK_FP
to run the J-job.  This passes the J-job script as the second argument
to LOAD_MODULES_RUN_TASK_FP (the first argument is the task name).  The
J-job then uses exec to run the J-job (while also terminating the LOAD_-
MODULES_RUN_TASK_FP script.
-->

{%- if run_task_make_grid %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_GRID_TN;" cycledefs="at_start" maxtries="{{ maxtries_make_grid }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_GRID_TN;" "&JOBSDIR;/JREGIONAL_MAKE_GRID"</command>
  {%- if machine in ["WCOSS_DELL_P3"]  %}
    <nodes>{{ nnodes_make_grid }}:ppn=1</nodes>
  {%- else %}
    <nodes>{{ nnodes_make_grid }}:ppn={{ ppn_make_grid }}</nodes>
  {%- endif %}
    <walltime>{{ wtime_make_grid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&MAKE_GRID_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_GRID_TN;.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>

  </task>
{%- endif %}
{%- if run_task_make_orog %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_OROG_TN;" cycledefs="at_start" maxtries="{{ maxtries_make_orog }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_OROG_TN;" "&JOBSDIR;/JREGIONAL_MAKE_OROG"</command>
  {%- if machine in ["WCOSS_DELL_P3"]  %}
    <nodes>{{ nnodes_make_orog }}:ppn=1</nodes>
  {%- else %}
    <nodes>{{ nnodes_make_orog }}:ppn={{ ppn_make_orog }}</nodes>
  {%- endif %}
    <walltime>{{ wtime_make_orog }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&MAKE_OROG_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_OROG_TN;.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>

    <dependency>
      <or>
<!--        <taskdep task="make_grid"/> -->
        <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
        <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
      </or>
    </dependency>

  </task>
{%- endif %}
{%- if run_task_make_sfc_climo %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_SFC_CLIMO_TN;" cycledefs="at_start" maxtries="{{ maxtries_make_sfc_climo }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_SFC_CLIMO_TN;" "&JOBSDIR;/JREGIONAL_MAKE_SFC_CLIMO"</command>
    <nodes>{{ nnodes_make_sfc_climo }}:ppn={{ ppn_make_sfc_climo }}</nodes>
    <walltime>{{ wtime_make_sfc_climo }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&MAKE_SFC_CLIMO_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_SFC_CLIMO_TN;.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>

    <dependency>
      <and>
        <or>
<!--          <taskdep task="&MAKE_GRID_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_OROG_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_OROG_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_OROG;</left><right>FALSE</right></streq>
        </or>
      </and>
    </dependency>

  </task>
{%- endif %}
{%- if run_task_get_extrn_ics %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&GET_EXTRN_ICS_TN;" cycledefs="forecast" maxtries="{{ maxtries_get_extrn_ics }}">

    &RSRV_HPSS;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_EXTRN_ICS_TN;" "&JOBSDIR;/JREGIONAL_GET_EXTRN_MDL_FILES"</command>
  {%- if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {%- endif %}
    <nodes>{{ nnodes_get_extrn_ics }}:ppn={{ ppn_get_extrn_ics }}</nodes>
    <walltime>{{ wtime_get_extrn_ics }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&GET_EXTRN_ICS_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&GET_EXTRN_ICS_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>ICS_OR_LBCS</name><value>ICS</value></envar>

  </task>
{%- endif %}
{%- if run_task_get_extrn_lbcs %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&GET_EXTRN_LBCS_TN;" cycledefs="forecast" maxtries="{{ maxtries_get_extrn_lbcs }}">

    &RSRV_HPSS;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_EXTRN_LBCS_TN;" "&JOBSDIR;/JREGIONAL_GET_EXTRN_MDL_FILES"</command>
  {%- if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {%- endif %}
    <nodes>{{ nnodes_get_extrn_lbcs }}:ppn={{ ppn_get_extrn_lbcs }}</nodes>
    <walltime>{{ wtime_get_extrn_lbcs }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&GET_EXTRN_LBCS_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&GET_EXTRN_LBCS_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>ICS_OR_LBCS</name><value>LBCS</value></envar>

  </task>
{%- endif %}
{%- if run_task_get_obs_ccpa %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&GET_OBS_CCPA_TN;" cycledefs="forecast" maxtries="{{ maxtries_get_obs_ccpa }}">

    &RSRV_HPSS;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_OBS;" "&JOBSDIR;/JREGIONAL_GET_OBS_CCPA"</command>
  {%- if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {%- endif %}
    <nodes>{{ nnodes_get_obs_ccpa }}:ppn={{ ppn_get_obs_ccpa }}</nodes>
    <walltime>{{ wtime_get_obs_ccpa }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&GET_OBS_CCPA_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&GET_OBS_CCPA_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>FHR</name><value><cyclestr>{% for h in range(0, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar>
    <envar><name>ACCUM</name><value>01</value></envar>

  </task>
{%- endif %}
{%- if run_task_get_obs_mrms %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&GET_OBS_MRMS_TN;" cycledefs="forecast" maxtries="{{ maxtries_get_obs_mrms }}">

    &RSRV_HPSS;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_OBS;" "&JOBSDIR;/JREGIONAL_GET_OBS_MRMS"</command>
  {%- if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {%- endif %}
    <nodes>{{ nnodes_get_obs_mrms }}:ppn={{ ppn_get_obs_mrms }}</nodes>
    <walltime>{{ wtime_get_obs_mrms }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&GET_OBS_MRMS_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&GET_OBS_MRMS_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&MRMS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>FHR</name><value><cyclestr>{% for h in range(0, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar>
    <envar><name>SCRIPTSDIR</name><value>&SCRIPTSDIR;</value></envar>
    <envar><name>VAR</name><value>REFC RETOP</value></envar>
 
  </task>
{%- endif %}
{%- if run_task_get_obs_ndas %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&GET_OBS_NDAS_TN;" cycledefs="forecast" maxtries="{{ maxtries_get_obs_ndas }}">

    &RSRV_HPSS;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&GET_OBS;" "&JOBSDIR;/JREGIONAL_GET_OBS_NDAS"</command>
  {%- if machine in ["WCOSS_DELL_P3"] %}
    <memory>2048M</memory><native>-R affinity[core]</native>
  {%- endif %}
    <nodes>{{ nnodes_get_obs_ndas }}:ppn={{ ppn_get_obs_ndas }}</nodes>
    <walltime>{{ wtime_get_obs_ndas }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&GET_OBS_NDAS_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&GET_OBS_NDAS_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&NDAS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>FHR</name><value><cyclestr>{% for h in range(0, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar>

  </task>
{%- endif %}








{#-
NEW obs pre-processing tasks that must be run if either deterministic
or ensemble verification tasks are going to be run.
#}
{%- if run_tasks_vxdet or run_tasks_vxens %}

  {%- if ("SFC" in vx_fields) or ("UPA" in vx_fields) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXAUX_PB2NC_OBS_TN;" cycledefs="forecast" maxtries="{{ maxtries_run_vxaux_pb2nc_obs }}">
    &RSRV_DEFAULT;

    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXAUX_PB2NC_OBS"</command>
    <nodes>{{ nnodes_run_vxaux_pb2nc_obs }}:ppn={{ ppn_run_vxaux_pb2nc_obs }}</nodes>
    <walltime>{{ wtime_run_vxaux_pb2nc_obs }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&RUN_VXAUX_PB2NC_OBS_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXAUX_PB2NC_OBS_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>NDAS</value></envar>
    <envar><name>OBS_DIR</name><value>&NDAS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>

    <dependency>
      <and>
  {%- if run_task_get_obs_ndas %}
        <taskdep task="&GET_OBS_NDAS_TN;"/>
  {%- else %}
{#-
We only check for the existence of the NDAS observations directory, not
for individual prepbufr files within.  This is because this and other
downstream vx tasks can complete successfully even when some obs files
are missing (the check for individual files is done by the scripts that
this task calls).
#}
        <datadep><cyclestr>&NDAS_OBS_DIR;</cyclestr></datadep>
  {%- endif %}
      </and>
    </dependency>

  </task>
  {%- endif %}

  {%- if ("APCP" in vx_fields) %}
{#- #}
    {%- for accum in vx_apcp_accums_hrs -%}
      {%- set fmtstr = "%02d" %}
      {%- set accum2d = fmtstr%accum -%}
      {%- set accum2dh = accum2d ~ "h" -%}
      {%- set obtype = "CCPA" %}
      {%- set field = "APCP" -%}
      {%- set fieldname = field ~ accum2dh -%}
{#- #}
      {%- if (accum > 1) and (fcst_len_hrs >= accum) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXAUX_PCPCOMBINE_OBS_TN;_{{fieldname}}" cycledefs="forecast" maxtries="{{ maxtries_run_vxaux_pcpcombine_obs }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXAUX_PCPCOMBINE_OBS"</command>
    <nodes>{{ nnodes_run_vxaux_pcpcombine_obs }}:ppn={{ ppn_run_vxaux_pcpcombine_obs }}</nodes>
    <walltime>{{ wtime_run_vxaux_pcpcombine_obs }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&RUN_VXAUX_PCPCOMBINE_OBS_TN;_{{fieldname}}</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXAUX_PCPCOMBINE_OBS_TN;_{{fieldname}}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d}}</value></envar>

    <dependency>
      <and>
  {%- if run_task_get_obs_ccpa %}
        <taskdep task="&GET_OBS_CCPA_TN;"/>
  {%- else %}
{#-
We only check for the existence of the top-level CCPA observations
directory, not the individual daily subdirectories within.  This is 
because this and other downstream vx tasks can complete successfully
even when some obs files are missing (the check for individual files is
done by the scripts that this task calls).
#}
        <datadep><cyclestr>&CCPA_OBS_DIR;</cyclestr></datadep>
  {%- endif %}
      </and>
    </dependency>

  </task>
      {%- endif %}

    {%- endfor %}
  {%- endif %}

{%- endif %}

{%- if is_ens_fcst or run_tasks_vxens %}
<!--
************************************************************************
************************************************************************
-->
  <metatask name="run_ens_mems">

    <var name="{{ ensmem_indx_name }}">
{%- for m in range(1, num_ens_members+1) -%}
  {%- set fmtstr=" %0"~ndigits_ensmem_names~"d" -%}
  {{- fmtstr%m -}}
{%- endfor %} </var>
    <var name="{{ ens_timelag_var_name }}">{{ ens_time_lag_hhmmss }}</var>
{%- endif %}
{%- if run_task_make_ics %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_ICS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_make_ics }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_ICS_TN;" "&JOBSDIR;/JREGIONAL_MAKE_ICS"</command>
    <nodes>{{ nnodes_make_ics }}:ppn={{ ppn_make_ics }}</nodes>
    <walltime>{{ wtime_make_ics }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&MAKE_ICS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_ICS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>

    <dependency>
      <and>
        <taskdep task="&GET_EXTRN_ICS_TN;"/>
        <or>
<!--          <taskdep task="&MAKE_GRID_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_OROG_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_OROG_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_OROG;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_SFC_CLIMO_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_SFC_CLIMO_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_SFC_CLIMO;</left><right>FALSE</right></streq>
        </or>
      </and>
    </dependency>

  </task>
{%- endif %}
{%- if run_task_make_lbcs %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&MAKE_LBCS_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_make_lbcs }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&MAKE_LBCS_TN;" "&JOBSDIR;/JREGIONAL_MAKE_LBCS"</command>
    <nodes>{{ nnodes_make_lbcs }}:ppn={{ ppn_make_lbcs }}</nodes>
    <walltime>{{ wtime_make_lbcs }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&MAKE_LBCS_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&MAKE_LBCS_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>

    <dependency>
      <and>
        <taskdep task="&GET_EXTRN_LBCS_TN;"/>
        <or>
<!--          <taskdep task="&MAKE_GRID_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_GRID_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_GRID;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_OROG_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_OROG_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_OROG;</left><right>FALSE</right></streq>
        </or>
        <or>
<!--          <taskdep task="&MAKE_SFC_CLIMO_TN;"/> -->
          <datadep age="00:00:00:05">&LOGDIR;/&MAKE_SFC_CLIMO_TN;_task_complete.txt</datadep>
          <streq><left>&RUN_TASK_MAKE_SFC_CLIMO;</left><right>FALSE</right></streq>
        </or>
      </and>
    </dependency>

  </task>
{%- endif %}
{%- if run_task_run_fcst %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_FCST_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_run_fcst }}">

    &RSRV_FCST;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_FCST_TN;" "&JOBSDIR;/JREGIONAL_RUN_FCST"</command>
  {%- if machine in ["JET", "HERA", "LINUX"]  %}
    <cores>{{ ncores_run_fcst }}</cores>
    <native>{{ native_run_fcst }}</native>
  {%- else %}
    <nodes>{{ nnodes_run_fcst }}:ppn={{ ppn_run_fcst }}</nodes>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- endif %}
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <walltime>{{ wtime_run_fcst }}</walltime>
    <jobname>&RUN_FCST_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_FCST_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    <envar><name>ENSMEM_INDX</name><value><cyclestr>#{{ ensmem_indx_name }}#</cyclestr></value></envar>

    <dependency>
      <and>
        <taskdep task="&MAKE_ICS_TN;{{ uscore_ensmem_name }}"/>
        <taskdep task="&MAKE_LBCS_TN;{{ uscore_ensmem_name }}"/>
      </and>
    </dependency>

  </task>
{%- endif %}
{%- if run_task_run_post %}
<!--
************************************************************************
************************************************************************
-->
  {%- if sub_hourly_post %}
<!--
Define the post-processing task for first model output time.  The forecast 
hour corresponding to this output time is zero (formatted to the appropriate
number of digits), and the corresponding forecast minute is the first model 
time step dt_atmos, i.e. it is not zero.  This is because FV3 is designed 
such that its first output file contains fields at the first time step.  
It is for this reason that this task is not rolled into the metatask(s) 
further below.

Note that we wrap this task in a metatask in order to be able to declare
and use the variables fhr and fmn.  This allows the block of code inside
the <task> tag (except for the dependencies) to be identical to the ones 
later below for other output times.
-->
  <metatask>

    <var name="fhr">000</var>
    <var name="fmn">00</var>
    <task name="&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#" cycledefs="forecast" maxtries="{{ maxtries_run_post }}">

      &RSRV_DEFAULT;
      <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_POST_TN;" "&JOBSDIR;/JREGIONAL_RUN_POST"</command>
      <nodes>{{ nnodes_run_post }}:ppn={{ ppn_run_post }}</nodes>
      <walltime>{{ wtime_run_post }}</walltime>
      <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
      <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
      <jobname>&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#</jobname>
      <join><cyclestr>&LOGDIR;/&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#_@Y@m@d@H.log</cyclestr></join>

      <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
      <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
      <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
      <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
      <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
      <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
      <envar><name>fhr</name><value>#fhr#</value></envar>
      <envar><name>fmn</name><value>#fmn#</value></envar>

<!--
Note that because the forecast minutes and seconds corresponding to the
first model output time are not exactly zero, we use the jinja template
variable first_fv3_file_tstr instead of fhr and fmn to form the file 
names in the dependencies.
-->
      <dependency>
        <or>
          <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
          <and>
            <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/dynf{{ first_fv3_file_tstr }}.nc</cyclestr></datadep>
            <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/phyf{{ first_fv3_file_tstr }}.nc</cyclestr></datadep>
          </and>
        </or>
      </dependency>

    </task>

  </metatask>

<!--
Define the post-processing tasks for the second through last output minutes
of the first output hour (which is zero).  We use two metatasks for this.
The inner one is needed to loop over the minutes, and the outer one is
used in order to be able to declare and use the variable fhr.  Use of this
variable (along with the fmn variable in the inner metatask) allows the
block of code inside the <task> tag to be identical to the ones later below
for other output times.
-->
  <metatask name="&RUN_POST_TN;{{ uscore_ensmem_name }}_f000">

    <var name="fhr">000</var>
    <metatask>

      <var name="fmn">{% for min in range(delta_min, 60, delta_min) %}{{ " %02d" % min }}{% endfor %}</var>
      <task name="&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#" cycledefs="forecast" maxtries="{{ maxtries_run_post }}">

        &RSRV_DEFAULT;
        <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_POST_TN;" "&JOBSDIR;/JREGIONAL_RUN_POST"</command>
        <nodes>{{ nnodes_run_post }}:ppn={{ ppn_run_post }}</nodes>
        <walltime>{{ wtime_run_post }}</walltime>
        <nodesize>&NCORES_PER_NODE;</nodesize>
      {%- if machine in ["GAEA"]  %}
        <native>&SLURM_NATIVE_CMD;</native>
      {%- endif %}
        <jobname>&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#</jobname>
        <join><cyclestr>&LOGDIR;/&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#_@Y@m@d@H.log</cyclestr></join>

        <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
        <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
        <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
        <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
        <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
        <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
        <envar><name>fhr</name><value>#fhr#</value></envar>
        <envar><name>fmn</name><value>#fmn#</value></envar>

        <dependency>
          <or>
            <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
            <and>
              <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/dynf#fhr#:#fmn#:00.nc</cyclestr></datadep>
              <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/phyf#fhr#:#fmn#:00.nc</cyclestr></datadep>
            </and>
          </or>
        </dependency>

      </task>

    </metatask>

  </metatask>
  {%- endif %}

  <metatask name="&RUN_POST_TN;{{ uscore_ensmem_name }}">
  {%- if sub_hourly_post %}
<!--
Define the post-processing tasks for the second through next-to-last model
output hours (and all output minutes for each such hour).  
-->
    <var name="fhr">{% for h in range(1, fcst_len_hrs) %}{{ " %03d" % h }}{% endfor %}</var>
    <metatask>
      <var name="fmn">{% for min in range(0, 60, delta_min) %}{{ " %02d" % min }}{% endfor %}</var>
      <task name="&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#" cycledefs="forecast" maxtries="{{ maxtries_run_post }}">
  {%- else %}
<!--
Define the post-processing tasks for each model output hour.  Note that
only one metatask is needed for this purpose (the inner one that loops 
over the hours), but we use two metatasks in order to be able to use the 
variable fmn, which here is always set to zero.  Use of this variable 
(along with the fhr variable in the inner metatask) allows the block of 
code inside the <task> tag to be identical to the case in which subhourly 
post-processing is performed (i.e. the case in which the minutes are not 
always zero).
-->
    <var name="fhr">{% for h in range(0, fcst_len_hrs+1) %}{{ " %03d" % h }}{% endfor %}</var>
      <task name="&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr#" cycledefs="forecast" maxtries="{{ maxtries_run_post }}">
  {%- endif %}

        &RSRV_DEFAULT;
        <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_POST_TN;" "&JOBSDIR;/JREGIONAL_RUN_POST"</command>
        <nodes>{{ nnodes_run_post }}:ppn={{ ppn_run_post }}</nodes>
        <walltime>{{ wtime_run_post }}</walltime>
        <nodesize>&NCORES_PER_NODE;</nodesize>
      {%- if machine in ["GAEA"]  %}
        <native>&SLURM_NATIVE_CMD;</native>
      {%- endif %}
        {%- if sub_hourly_post %}
        <jobname>&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#</jobname>
        <join><cyclestr>&LOGDIR;/&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#_@Y@m@d@H.log</cyclestr></join>
        {%- else %}
        <jobname>&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr#</jobname>
        <join><cyclestr>&LOGDIR;/&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr#_@Y@m@d@H.log</cyclestr></join>
        {%- endif %}

        <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
        <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
        <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
        <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
        <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
        <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
        {%- if sub_hourly_post %}
        <envar><name>fhr</name><value>#fhr#</value></envar>
        <envar><name>fmn</name><value>#fmn#</value></envar>
        {%- else %}
        <envar><name>fhr</name><value>#fhr#</value></envar>
        {%- endif %}

        <dependency>
          <or>
            <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
            <and>
            {%- if sub_hourly_post %}
              <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/dynf#fhr#:#fmn#:00.nc</cyclestr></datadep>
              <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/phyf#fhr#:#fmn#:00.nc</cyclestr></datadep>
            {%- else %}
              <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/dynf#fhr#.nc</cyclestr></datadep>
              <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/phyf#fhr#.nc</cyclestr></datadep>
            {%- endif %}
            </and>
          </or>
        </dependency>

      </task>

    {%- if sub_hourly_post %}
    </metatask>
    {%- else %}
    {%- endif %}
  </metatask>

  {%- if sub_hourly_post %}
<!--
Define the post-processing task for the last model output time.  The 
forecast hour corresponding to this output time is the length of the 
forecast (assuming it is specified in integer hours), and the corresponding 
minute is 0.  This task cannot be included in the metatask above because 
for a given hour, the latter loops over all the valid output minutes, 
whereas for this last hour, only the first minute must be considered.

Note that we wrap this task in a metatask in order to be able to declare
and use the variables fhr and fmn.  This allows the block of code inside
the <task> tag to be identical to the ones above for other output times.
-->
  <metatask>

    <var name="fhr">{{ "%03d" % fcst_len_hrs }}</var>
    <var name="fmn">00</var>
    <task name="&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#" cycledefs="forecast" maxtries="{{ maxtries_run_post }}">

      &RSRV_DEFAULT;
      <command>&LOAD_MODULES_RUN_TASK_FP; "&RUN_POST_TN;" "&JOBSDIR;/JREGIONAL_RUN_POST"</command>
      <nodes>{{ nnodes_run_post }}:ppn={{ ppn_run_post }}</nodes>
      <walltime>{{ wtime_run_post }}</walltime>
      <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
      <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
      <jobname>&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#</jobname>
      <join><cyclestr>&LOGDIR;/&RUN_POST_TN;{{ uscore_ensmem_name }}_f#fhr##fmn#_@Y@m@d@H.log</cyclestr></join>

      <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
      <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
      <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
      <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
      <envar><name>SLASH_ENSMEM_SUBDIR</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
      <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
      <envar><name>fhr</name><value>#fhr#</value></envar>
      <envar><name>fmn</name><value>#fmn#</value></envar>

      <dependency>
        <or>
          <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
          <and>
            <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/dynf#fhr#:#fmn#:00.nc</cyclestr></datadep>
            <datadep age="05:00"><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H{{ slash_ensmem_subdir }}/phyf#fhr#:#fmn#:00.nc</cyclestr></datadep>
          </and>
        </or>
      </dependency>

    </task>

  </metatask>
  {%- endif %}
{%- endif %}





{%- if include_old_vx_tasks_in_xml %}

{# OLD deterministic grid_stat tasks. #}

{%- if run_task_vx_gridstat %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_GRIDSTAT_APCP01h_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_gridstat }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"</command>
    <nodes>{{ nnodes_vx_gridstat }}:ppn={{ ppn_vx_gridstat }}</nodes>
    <walltime>{{ wtime_vx_gridstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_GRIDSTAT_APCP01h_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr{{ cyclestr_offset }}>&LOGDIR;/&VX_GRIDSTAT_APCP01h_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr{{ cyclestr_offset }}>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr{{ cyclestr_offset }}>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>01</value></envar>
  {%- if is_ens_fcst %}
    <envar><name>mem_indx</name><value>#{{ ensmem_indx_name }}#</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
  {%- endif %}

  {%- if run_task_run_fcst or run_task_get_obs_ccpa %}

    <dependency>
      <and>
    {%- if run_task_get_obs_ccpa %}
        <taskdep task="&GET_OBS_CCPA_TN;"/>
    {%- endif %}
    {%- if run_task_run_fcst %}
      {%- if write_dopost %}
        <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
      {%- else %}
        <metataskdep metatask="&RUN_POST_TN;{{ uscore_ensmem_name }}"/>
      {%- endif %}
    {%- endif %}
      </and>
    </dependency>
  {%- else %}
    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXDET_TASKS;</left><right>TRUE</right></streq>
      </and>
    </dependency>
  {%- endif %}

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_GRIDSTAT_REFC_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_gridstat_refc }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"</command>
    <nodes>{{ nnodes_vx_gridstat }}:ppn={{ ppn_vx_gridstat }}</nodes>
    <walltime>{{ wtime_vx_gridstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_GRIDSTAT_REFC_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr{{ cyclestr_offset }}>&LOGDIR;/&VX_GRIDSTAT_REFC_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&MRMS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr{{ cyclestr_offset }}>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr{{ cyclestr_offset }}>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>REFC</value></envar>
  {%- if is_ens_fcst %}
    <envar><name>mem_indx</name><value>#{{ ensmem_indx_name }}#</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
  {%- endif %}

  {%- if run_task_run_fcst or run_task_get_obs_mrms %}

    <dependency>
      <and>
    {%- if run_task_get_obs_mrms %}
        <taskdep task="&GET_OBS_MRMS_TN;"/>
    {%- endif %}
    {%- if run_task_run_fcst %}
      {%- if write_dopost %}
        <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
      {%- else %}
        <metataskdep metatask="&RUN_POST_TN;{{ uscore_ensmem_name }}"/>
      {%- endif %}
    {%- endif %}
      </and>
    </dependency>
  {%- else %}
    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXDET_TASKS;</left><right>TRUE</right></streq>
      </and>
    </dependency>
  {%- endif %}

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_GRIDSTAT_RETOP_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_gridstat_retop }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"</command>
    <nodes>{{ nnodes_vx_gridstat }}:ppn={{ ppn_vx_gridstat }}</nodes>
    <walltime>{{ wtime_vx_gridstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_GRIDSTAT_RETOP_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr{{ cyclestr_offset }}>&LOGDIR;/&VX_GRIDSTAT_RETOP_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&MRMS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr{{ cyclestr_offset }}>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr{{ cyclestr_offset }}>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>RETOP</value></envar>
  {%- if is_ens_fcst %}
    <envar><name>mem_indx</name><value>#{{ ensmem_indx_name }}#</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
  {%- endif %}

  {%- if run_task_run_fcst or run_task_get_obs_mrms %}

    <dependency>
      <and>
    {%- if run_task_get_obs_mrms %}
        <taskdep task="&GET_OBS_MRMS_TN;"/>
    {%- endif %}
    {%- if run_task_run_fcst %}
      {%- if write_dopost %}
        <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
      {%- else %}
        <metataskdep metatask="&RUN_POST_TN;{{ uscore_ensmem_name }}"/>
      {%- endif %}
    {%- endif %}
      </and>
    </dependency>
  {%- else %}
    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXDET_TASKS;</left><right>TRUE</right></streq>
      </and>
    </dependency>
  {%- endif %}

  </task>
  {%- if fcst_len_hrs >= 3 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_GRIDSTAT_APCP03h_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_gridstat_03h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"</command>
    <nodes>{{ nnodes_vx_gridstat }}:ppn={{ ppn_vx_gridstat }}</nodes>
    <walltime>{{ wtime_vx_gridstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_GRIDSTAT_APCP03h_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr{{ cyclestr_offset }}>&LOGDIR;/&VX_GRIDSTAT_APCP03h_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr{{ cyclestr_offset }}>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr{{ cyclestr_offset }}>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>03</value></envar>
    {%- if is_ens_fcst %}
    <envar><name>mem_indx</name><value>#{{ ensmem_indx_name }}#</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    {%- endif %}

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXDET_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_GRIDSTAT_APCP01h_TN;{{ uscore_ensmem_name }}"/>
      </and>
    </dependency>

  </task>
  {%- endif %}
  {%- if fcst_len_hrs >= 6 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_GRIDSTAT_APCP06h_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_gridstat_06h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"</command>
    <nodes>{{ nnodes_vx_gridstat }}:ppn={{ ppn_vx_gridstat }}</nodes>
    <walltime>{{ wtime_vx_gridstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_GRIDSTAT_APCP06h_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr{{ cyclestr_offset }}>&LOGDIR;/&VX_GRIDSTAT_APCP06h_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr{{ cyclestr_offset }}>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr{{ cyclestr_offset }}>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>06</value></envar>
    {%- if is_ens_fcst %}
    <envar><name>mem_indx</name><value>#{{ ensmem_indx_name }}#</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    {%- endif %}

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXDET_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_GRIDSTAT_APCP01h_TN;{{ uscore_ensmem_name }}"/>
<!--
The following dependency should ideally not be needed, but it is needed 
due to a file read bug in MET or METplus when the VX_GRIDSTAT_APCP06h_TN
is launched at the same time as the VX_GRIDSTAT_APCP03h_TN and/or 
VX_GRIDSTAT_APCP24h_TN.  Thus, here, we wait until the VX_GRIDSTAT_APCP03h_TN
is done before launching VX_GRIDSTAT_APCP24h_TN.  This dependency should
be removed once that bug is fixed.
-->
        <taskdep task="&VX_GRIDSTAT_APCP03h_TN;{{ uscore_ensmem_name }}"/>
      </and>
    </dependency>

  </task>
  {%- endif %}
  {%- if fcst_len_hrs >= 24 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_GRIDSTAT_APCP24h_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_gridstat_24h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_GRIDSTAT"</command>
    <nodes>{{ nnodes_vx_gridstat }}:ppn={{ ppn_vx_gridstat }}</nodes>
    <walltime>{{ wtime_vx_gridstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_GRIDSTAT_APCP24h_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr{{ cyclestr_offset }}>&LOGDIR;/&VX_GRIDSTAT_APCP24h_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr{{ cyclestr_offset }}>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr{{ cyclestr_offset }}>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>24</value></envar>
    {%- if is_ens_fcst %}
    <envar><name>mem_indx</name><value>#{{ ensmem_indx_name }}#</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    {%- endif %}

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXDET_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_GRIDSTAT_APCP01h_TN;{{ uscore_ensmem_name }}"/>
<!--
The following dependency should ideally not be needed, but it is needed 
due to a file read bug in MET or METplus when the VX_GRIDSTAT_APCP24h_TN
is launched at the same time as the VX_GRIDSTAT_APCP03h_TN and/or 
VX_GRIDSTAT_APCP06h_TN.  Thus, here, we wait until the VX_GRIDSTAT_APCP06h_TN
is done before launching VX_GRIDSTAT_APCP24h_TN.  This dependency should
be removed once that bug is fixed.
-->
        <taskdep task="&VX_GRIDSTAT_APCP06h_TN;{{ uscore_ensmem_name }}"/>
      </and>
    </dependency>

  </task>
  {%- endif %}
{%- endif %}

{# OLD deterministic point_stat tasks. #}
{%- if run_task_vx_pointstat %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_POINTSTAT_TN;{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_pointstat }}">
    &RSRV_DEFAULT;

    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_POINTSTAT"</command>
    <nodes>{{ nnodes_vx_pointstat }}:ppn={{ ppn_vx_pointstat }}</nodes>
    <walltime>{{ wtime_vx_pointstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_POINTSTAT_TN;{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr{{ cyclestr_offset }}>&LOGDIR;/&VX_POINTSTAT_TN;{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&NDAS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr{{ cyclestr_offset }}>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr{{ cyclestr_offset }}>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr{{ cyclestr_offset }}>@H</cyclestr></value></envar>
  {%- if is_ens_fcst %}
    <envar><name>mem_indx</name><value>#{{ ensmem_indx_name }}#</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
  {%- endif %}

  {%- if run_task_run_fcst or run_task_get_obs_ndas %}

    <dependency>
      <and>
    {%- if run_task_get_obs_ndas %}
        <taskdep task="&GET_OBS_NDAS_TN;"/>
    {%- endif %}
    {%- if run_task_run_fcst %}
      {%- if write_dopost %}
        <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
      {%- else %}
        <metataskdep metatask="&RUN_POST_TN;{{ uscore_ensmem_name }}"/>
      {%- endif %}
    {%- endif %}
      </and>
    </dependency>
  {%- else %}
    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXDET_TASKS;</left><right>TRUE</right></streq>
      </and>
    </dependency>
  {%- endif %}

  </task>
{%- endif %}

{%- endif %}



{#-
NEW Forecast pre-processing tasks that must be run if either deterministic
or ensemble verification tasks are going to be run.
#}
{%- if run_tasks_vxdet or run_tasks_vxens %}

  {%- if ("APCP" in vx_fields) %}

    {%- for accum in vx_apcp_accums_hrs -%}
      {%- set fmtstr = "%02d" %}
      {%- set accum2d = fmtstr%accum %}
      {%- set accum2dh = accum2d ~ "h" %}
      {%- set obtype = "CCPA" %}
      {%- set field = "APCP" %}
      {%- set fieldname = field ~ accum2dh %}
{#- #}
      {%- if (accum > 1) and (fcst_len_hrs >= accum) %}
{#- #}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXAUX_PCPCOMBINE_FCST_TN;_{{fieldname}}{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_run_vxaux_pcpcombine_fcst }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXAUX_PCPCOMBINE_FCST"</command>
    <nodes>{{ nnodes_run_vxaux_pcpcombine_fcst }}:ppn={{ ppn_run_vxaux_pcpcombine_fcst }}</nodes>
    <walltime>{{ wtime_run_vxaux_pcpcombine_fcst }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
          {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
          {%- endif %}
    <jobname>&RUN_VXAUX_PCPCOMBINE_FCST_TN;_{{fieldname}}{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXAUX_PCPCOMBINE_FCST_TN;_{{fieldname}}{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d}}</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
          {%- if is_ens_fcst or run_tasks_vxens %}
    <envar><name>MEM_INDX_OR_NULL</name><value>#{{ensmem_indx_name}}#</value></envar>
          {%- else %}
    <envar><name>MEM_INDX_OR_NULL</name><value></value></envar>
          {%- endif %}

    <dependency>
      <and>
{#-
Redundant dependency that will always evaluate to true.  This is included
because it helps simplify the coding in the jinja template of this xml
(because rocoto does not allow empty <dependency>, <and>, and other tags).
#}
        <streq><left>TRUE</left><right>TRUE</right></streq>
{#-
If the post-processed forecast output needed for verification is being
generated by the RUN_FCST_TN task (by having RUN_TASK_RUN_FCST and 
WRITE_DOPOST both set to TRUE, which causes UPP to be called inline, 
i.e. from within the weather model), then include a dependency on the
RUN_FCST_TN task.
#}
        {%- if run_task_run_fcst and write_dopost %}
        <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
{#-
Otherwise, if UPP is being called separately from the forecast (by
having RUN_TASK_RUN_POST set to TRUE), then inlude a dependency on the
RUN_POST_TN metatask (which runs UPP for all forecast output hours).

Note that in this case, we have to wait until the whole RUN_POST_TN
metatask is complete before this task can launch, i.e. we cannot launch
this task as the UPP output files for each forecast output hour become
available.  This is because the loop over forecast hours for this task
is performed within MET/METplus, not here in rocoto, whereas the loop
over forecast hours for the post-processing is done by rocoto in this
xml.  This may be changed in the future.
#}
        {%- elif run_task_run_post %}
        <metataskdep metatask="&RUN_POST_TN;{{ uscore_ensmem_name }}"/>
        {%- endif %}
      </and>
    </dependency>

  </task>
      {%- endif %}
    {%- endfor %}

  {%- endif %}

{%- endif %}



{#- NEW deterministic vx tasks. #}

{%- if run_tasks_vxdet %}

  {%- for field in vx_fields -%}
    {%- for accum in vx_apcp_accums_hrs -%}
{#- #}
      {%- set fmtstr = "%02d" %}
      {%- set accum2d_or_null = "" %}
      {%- set accum2dh_or_null = "" %}
{#-
Apparently need to intialize some variables here.
#}
      {%- set fieldname = "" %}
      {%- set obtype = "" %}
      {%- set create_gridstat_task = false %}
      {%- set create_pointstat_task = false %}
{#- #}
      {%- if (field == "APCP") %}
        {%- set obtype = "CCPA" %}
        {%- if (accum > 0) and (fcst_len_hrs >= accum) %}
          {%- set accum2d_or_null = fmtstr%accum %}
          {%- set accum2dh_or_null = accum2d_or_null ~ "h" %}
          {%- set create_gridstat_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "REFC") or (field == "RETOP") %}
        {%- set obtype = "MRMS" %}
        {%- if accum == 0 %}
          {%- set create_gridstat_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "SFC") or (field == "UPA") %}
        {%- set obtype = "NDAS" %}
        {%- if accum == 0 %}
          {%- set create_pointstat_task = true %}
        {%- endif %}
      {%- endif %}
      {%- set fieldname = field ~ accum2dh_or_null %}
{#-
First, generate grid-based deterministic vx tasks.
#}
      {%- if (create_gridstat_task == true) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXDET_GRIDSTAT_TN;_{{fieldname}}_cmn{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_vx_gridstat }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXDET_GRIDSTAT_CMN"</command>
    <nodes>{{ nnodes_run_vxdet_gridstat }}:ppn={{ ppn_run_vxdet_gridstat }}</nodes>
    <walltime>{{ wtime_run_vxdet_gridstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&RUN_VXDET_GRIDSTAT_TN;_{{fieldname}}_cmn{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXDET_GRIDSTAT_TN;_{{fieldname}}_cmn{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    {%- if is_ens_fcst or run_tasks_vxens %}
    <envar><name>MEM_INDX_OR_NULL</name><value>#{{ensmem_indx_name}}#</value></envar>
    {%- else %}
    <envar><name>MEM_INDX_OR_NULL</name><value></value></envar>
    {%- endif %}

    {%- if run_task_run_fcst or run_task_get_obs_mrms or (accum > 1) %}

    <dependency>
      <and>
{#-
If the data fetching task for the current observation type is part of 
the workflow, make sure it has completed.
#}
      {%- if run_task_get_obs %}
        <taskdep task="&GET_OBS_{{obtype}}_TN;"/>
      {%- endif %}
      {%- if accum > 1 %}
        <taskdep task="&RUN_VXAUX_PCPCOMBINE_OBS_TN;_{{fieldname}}"/>
        <taskdep task="&RUN_VXAUX_PCPCOMBINE_FCST_TN;_{{fieldname}}{{ uscore_ensmem_name }}"/>
      {%- endif %}
{#-
      {%- if (field == "APCP" ) %}
        {% if (run_task_get_ccpa) %}
        <taskdep task="&GET_OBS_CCPA_TN;"/>
        {%- endif %}
        {%- if accum > 1 %}
        <taskdep task="&RUN_VXAUX_PCPCOMBINE_OBS_TN;_{{fieldname}}"/>
        <taskdep task="&RUN_VXAUX_PCPCOMBINE_FCST_TN;_{{fieldname}}{{ uscore_ensmem_name }}"/>
        {%- endif %}
      {%- elif (field == "REFC" or field == "RETOP" ) %}
        {% if (run_task_get_mrms) %}
        <taskdep task="&GET_OBS_MRMS_TN;"/>
        {%- endif %}
      {%- endif %}
#}
      {%- if run_task_run_fcst %}
        {%- if write_dopost %}
        <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
        {%- else %}
        <metataskdep metatask="&RUN_POST_TN;{{ uscore_ensmem_name }}"/>
        {%- endif %}
      {%- endif %}
      </and>
    </dependency>
    {%- endif %}

  </task>
      {%- endif %}
{#-
Now generate point-based deterministic vx tasks.
#}
      {%- if (create_pointstat_task == true) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXDET_POINTSTAT_TN;_{{fieldname}}_cmn{{ uscore_ensmem_name }}" cycledefs="forecast" maxtries="{{ maxtries_run_vxdet_pointstat }}">
    &RSRV_DEFAULT;

    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXDET_POINTSTAT_CMN"</command>
    <nodes>{{ nnodes_run_vxdet_pointstat }}:ppn={{ ppn_run_vxdet_pointstat }}</nodes>
    <walltime>{{ wtime_run_vxdet_pointstat }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&RUN_VXDET_POINTSTAT_TN;_{{fieldname}}_cmn{{ uscore_ensmem_name }}</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXDET_POINTSTAT_TN;_{{fieldname}}_cmn{{ uscore_ensmem_name }}_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>
    <envar><name>USCORE_ENSMEM_NAME_OR_NULL</name><value>{{ uscore_ensmem_name }}</value></envar>
    <envar><name>SLASH_ENSMEM_SUBDIR_OR_NULL</name><value><cyclestr>{{ slash_ensmem_subdir }}</cyclestr></value></envar>
    {%- if is_ens_fcst or run_tasks_vxens %}
    <envar><name>MEM_INDX_OR_NULL</name><value>#{{ensmem_indx_name}}#</value></envar>
    {%- else %}
    <envar><name>MEM_INDX_OR_NULL</name><value></value></envar>
    {%- endif %}

    <dependency>
      <and>
      {%- if run_task_get_obs_ndas %}
        <taskdep task="&GET_OBS_NDAS_TN;"/>
      {%- endif %}
        <taskdep task="&RUN_VXAUX_PB2NC_OBS_TN;"/>
      {%- if run_task_run_fcst %}
        {%- if write_dopost %}
        <taskdep task="&RUN_FCST_TN;{{ uscore_ensmem_name }}"/>
        {%- else %}
        <metataskdep metatask="&RUN_POST_TN;{{ uscore_ensmem_name }}"/>
        {%- endif %}
      {%- endif %}
      </and>
    </dependency>

  </task>
      {%- endif %}

    {%- endfor %}
  {%- endfor %}

{%- endif %}

{%- if is_ens_fcst or run_tasks_vxens %}
  </metatask>
{%- endif %}








{%- if include_old_vx_tasks_in_xml %}

{#
OLD ensmeble grid-based vx tasks that call gen_ens_proc and ensemble_stat
and then call grid_stat to get the stats of the mean and then ?? to get
probabilistic ensemble stats.
#}

{%- if run_task_vx_ensgrid %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP01h_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID"</command>
    <nodes>{{ nnodes_vx_ensgrid }}:ppn={{ ppn_vx_ensgrid }}</nodes>
    <walltime>{{ wtime_vx_ensgrid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSGRID_APCP01h_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP01h_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--    <envar><name>FHR</name><value><cyclestr>{% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>01</value></envar>

    <dependency>
  {%- if run_task_get_obs_ccpa or run_task_run_post or is_ens_fcst %}
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
  {%- endif %}
  {%- if run_task_get_obs_ccpa %}
        <taskdep task="&GET_OBS_CCPA_TN;"/>
  {%- endif %}
  {%- if run_task_run_post %}
    {%- for m in range(1, num_ens_members+1) -%}
      {%- set fmtstr="%0"~ndigits_ensmem_names~"d" %}
        <metataskdep metatask="&RUN_POST_TN;_{{ ensmem_indx_name }}{{- fmtstr%m -}}"/>
    {%- endfor %}
  {%- endif %}
<!--
The following dependecy isn't actually needed.  It is a way to throttle
the number of rocoto tasks (so that the deterministic verification tasks
in the run_ens_metatask complete before the ensemble verification tasks
can launch.  But the taskthrottle attribute should really be used for 
this purpose.
-->
  {%- if is_ens_fcst %}
        <metataskdep metatask="run_ens_mems"/>
  {%- endif %}
  {%- if run_task_get_obs_ccpa or run_task_run_post or is_ens_fcst %}
      </and>
  {%- endif %}
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_REFC_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_refc }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID"</command>
    <nodes>{{ nnodes_vx_ensgrid }}:ppn={{ ppn_vx_ensgrid }}</nodes>
    <walltime>{{ wtime_vx_ensgrid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSGRID_REFC_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_REFC_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&MRMS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--    <envar><name>FHR</name><value><cyclestr>{% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>REFC</value></envar>

    <dependency>
  {%- if run_task_get_obs_mrms or run_task_run_post or is_ens_fcst %}
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
  {%- endif %}
  {%- if run_task_get_obs_mrms %}
        <taskdep task="&GET_OBS_MRMS_TN;"/>
  {%- endif %}
  {%- if run_task_run_post %}
    {%- for m in range(1, num_ens_members+1) -%}
      {%- set fmtstr="%0"~ndigits_ensmem_names~"d" %}
        <metataskdep metatask="&RUN_POST_TN;_{{ ensmem_indx_name }}{{- fmtstr%m -}}"/>
    {%- endfor %}
  {%- endif %}
<!--
The following dependecy isn't actually needed.  It is a way to throttle
the number of rocoto tasks (so that the deterministic verification tasks
in the run_ens_metatask complete before the ensemble verification tasks
can launch.  But the taskthrottle attribute should really be used for 
this purpose.
-->
  {%- if is_ens_fcst %}
        <metataskdep metatask="run_ens_mems"/>
  {%- endif %}
  {%- if run_task_get_obs_mrms or run_task_run_post or is_ens_fcst %}
      </and>
  {%- endif %}
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_RETOP_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_retop }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID"</command>
    <nodes>{{ nnodes_vx_ensgrid }}:ppn={{ ppn_vx_ensgrid }}</nodes>
    <walltime>{{ wtime_vx_ensgrid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSGRID_RETOP_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_RETOP_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&MRMS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--    <envar><name>FHR</name><value><cyclestr>{% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>RETOP</value></envar>

    <dependency>
  {%- if run_task_get_obs_mrms or run_task_run_post or is_ens_fcst %}
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
  {%- endif %}
  {%- if run_task_get_obs_mrms %}
        <taskdep task="&GET_OBS_MRMS_TN;"/>
  {%- endif %}
  {%- if run_task_run_post %}
    {%- for m in range(1, num_ens_members+1) -%}
      {%- set fmtstr="%0"~ndigits_ensmem_names~"d" %}
        <metataskdep metatask="&RUN_POST_TN;_{{ ensmem_indx_name }}{{- fmtstr%m -}}"/>
    {%- endfor %}
  {%- endif %}
<!--
The following dependecy isn't actually needed.  It is a way to throttle
the number of rocoto tasks (so that the deterministic verification tasks
in the run_ens_metatask complete before the ensemble verification tasks
can launch.  But the taskthrottle attribute should really be used for 
this purpose.
-->
  {%- if is_ens_fcst %}
        <metataskdep metatask="run_ens_mems"/>
  {%- endif %}
  {%- if run_task_get_obs_mrms or run_task_run_post or is_ens_fcst %}
      </and>
  {%- endif %}
    </dependency>

  </task>
  {%- if fcst_len_hrs >= 3 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP03h_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_03h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID"</command>
    <nodes>{{ nnodes_vx_ensgrid }}:ppn={{ ppn_vx_ensgrid }}</nodes>
    <walltime>{{ wtime_vx_ensgrid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP03h_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP03h_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--    <envar><name>FHR</name><value><cyclestr>{% for h in range(3, fcst_len_hrs+1, 3) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>03</value></envar>

    <dependency>
    {%- if run_task_get_obs_ccpa or is_ens_fcst %}
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
    {%- endif %}
    {%- if run_task_get_obs_ccpa %}
        <taskdep task="&GET_OBS_CCPA_TN;"/>
    {%- endif %}
    {%- if is_ens_fcst %}
<!--
The VX_ENSGRID_APCP03h_TN task depends on the presence of NetCDF files
generated by the PcpCombine tool in the deterministic verification tasks
for all ensemble members.  Thus, the run_ens_mems metatask (which 
contains the deterministic vx tasks, among others) must first complete
before this task can be launched.
-->
        <metataskdep metatask="run_ens_mems"/>
    {%- endif %}
<!-- The following is probably not necessary.  Commenting out. -->
<!--    <taskdep task="&VX_ENSGRID_APCP01h_TN;"/> -->
    {%- if run_task_get_obs_ccpa or is_ens_fcst %}
      </and>
    {%- endif %}
    </dependency>

  </task>
  {%- endif %}
  {%- if fcst_len_hrs >= 6 %}   
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP06h_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_06h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID"</command>
    <nodes>{{ nnodes_vx_ensgrid }}:ppn={{ ppn_vx_ensgrid }}</nodes>
    <walltime>{{ wtime_vx_ensgrid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP06h_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP06h_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar> 
<!--    <envar><name>FHR</name><value><cyclestr>{% for h in range(6, fcst_len_hrs+1, 6) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>06</value></envar>

    <dependency>
    {%- if run_task_get_obs_ccpa or is_ens_fcst %}
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
    {%- endif %}
    {%- if run_task_get_obs_ccpa %}
        <taskdep task="&GET_OBS_CCPA_TN;"/>
    {%- endif %}
    {%- if is_ens_fcst %}
<!--
The VX_ENSGRID_APCP06h_TN task depends on the presence of NetCDF files
generated by the PcpCombine tool in the deterministic verification tasks
for all ensemble members.  Thus, the run_ens_mems metatask (which 
contains the deterministic vx tasks, among others) must first complete
before this task can be launched.
-->
        <metataskdep metatask="run_ens_mems"/>
    {%- endif %}
<!-- The following is probably not necessary.  Commenting out. -->
<!--    <taskdep task="&VX_ENSGRID_APCP01h_TN;"/> -->
    {%- if run_task_get_obs_ccpa or is_ens_fcst %}
      </and>
    {%- endif %}
    </dependency>

  </task>
  {%- endif %}
  {%- if fcst_len_hrs >= 24 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP24h_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_24h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID"</command>
    <nodes>{{ nnodes_vx_ensgrid }}:ppn={{ ppn_vx_ensgrid }}</nodes>
    <walltime>{{ wtime_vx_ensgrid }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP24h_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP24h_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(24, fcst_len_hrs+1, 24) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>24</value></envar>

    <dependency>
    {%- if run_task_get_obs_ccpa or is_ens_fcst %}
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
    {%- endif %}
    {%- if run_task_get_obs_ccpa %}
        <taskdep task="&GET_OBS_CCPA_TN;"/>
    {%- endif %}
    {%- if is_ens_fcst %}
<!--
The VX_ENSGRID_APCP24h_TN task depends on the presence of NetCDF files
generated by the PcpCombine tool in the deterministic verification tasks
for all ensemble members.  Thus, the run_ens_mems metatask (which 
contains the deterministic vx tasks, among others) must first complete
before this task can be launched.
-->
        <metataskdep metatask="run_ens_mems"/>
    {%- endif %}
<!-- The following is probably not necessary.  Commenting out. -->
<!--    <taskdep task="&VX_ENSGRID_APCP01h_TN;"/> -->
    {%- if run_task_get_obs_ccpa or is_ens_fcst %}
      </and>
    {%- endif %}
    </dependency>

  </task>
  {%- endif %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP01h_MEAN_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_mean }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_MEAN"</command>
    <nodes>{{ nnodes_vx_ensgrid_mean }}:ppn={{ ppn_vx_ensgrid_mean }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_mean }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSGRID_APCP01h_MEAN_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP01h_MEAN_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>01</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP01h_TN;"/>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP01h_PROB_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_prob }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_PROB"</command>
    <nodes>{{ nnodes_vx_ensgrid_prob }}:ppn={{ ppn_vx_ensgrid_prob }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSGRID_APCP01h_PROB_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP01h_PROB_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>01</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP01h_TN;"/>
      </and>
    </dependency>

  </task>
{#
Note that there is no VX_ENSGRID_REFC_MEAN_TN task, so we go right to
the probabilistic one.
#}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_REFC_PROB_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_prob_refc }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_PROB"</command>
    <nodes>{{ nnodes_vx_ensgrid_prob }}:ppn={{ ppn_vx_ensgrid_prob }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSGRID_REFC_PROB_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_REFC_PROB_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&MRMS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>REFC</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_REFC_TN;"/>
      </and>
    </dependency>

  </task>
{#
Note that there is no VX_ENSGRID_REFTOP_MEAN_TN task, so we go right to
the probabilistic one.
#}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_RETOP_PROB_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_prob_retop }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_PROB"</command>
    <nodes>{{ nnodes_vx_ensgrid_prob }}:ppn={{ ppn_vx_ensgrid_prob }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSGRID_RETOP_PROB_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_RETOP_PROB_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&MRMS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--    <envar><name>FHR</name><value><cyclestr>{% for h in range(1, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>RETOP</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_RETOP_TN;"/>
      </and>
    </dependency>

  </task>
  {%- if fcst_len_hrs >= 3 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP03h_MEAN_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_mean_03h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_MEAN"</command>
    <nodes>{{ nnodes_vx_ensgrid_mean }}:ppn={{ ppn_vx_ensgrid_mean }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_mean }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP03h_MEAN_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP03h_MEAN_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(3, fcst_len_hrs+1, 3) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>03</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP03h_TN;"/>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP03h_PROB_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_prob_03h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_PROB"</command>
    <nodes>{{ nnodes_vx_ensgrid_prob }}:ppn={{ ppn_vx_ensgrid_prob }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP03h_PROB_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP03h_PROB_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(3, fcst_len_hrs+1, 3) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>03</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP03h_TN;"/>
      </and>
    </dependency>

  </task>
  {%- endif %}
  {%- if fcst_len_hrs >= 6 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP06h_MEAN_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_mean_06h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_MEAN"</command>
    <nodes>{{ nnodes_vx_ensgrid_mean }}:ppn={{ ppn_vx_ensgrid_mean }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_mean }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP06h_MEAN_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP06h_MEAN_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(6, fcst_len_hrs+1, 6) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>06</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP06h_TN;"/>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP06h_PROB_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_prob_06h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_PROB"</command>
    <nodes>{{ nnodes_vx_ensgrid_prob }}:ppn={{ ppn_vx_ensgrid_prob }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP06h_PROB_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP06h_PROB_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(6, fcst_len_hrs+1, 6) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>06</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP06h_TN;"/>
      </and>
    </dependency>

  </task>
  {%- endif %}
  {%- if fcst_len_hrs >= 24 %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP24h_MEAN_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_mean_24h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_MEAN"</command>
    <nodes>{{ nnodes_vx_ensgrid_mean }}:ppn={{ ppn_vx_ensgrid_mean }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_mean }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP24h_MEAN_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP24h_MEAN_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(24, fcst_len_hrs+1, 24) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>24</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP24h_TN;"/>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSGRID_APCP24h_PROB_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_ensgrid_prob_24h }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSGRID_PROB"</command>
    <nodes>{{ nnodes_vx_ensgrid_prob }}:ppn={{ ppn_vx_ensgrid_prob }}</nodes>
    <walltime>{{ wtime_vx_ensgrid_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
    {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
    {%- endif %}
    <jobname>&VX_ENSGRID_APCP24h_PROB_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSGRID_APCP24h_PROB_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&CCPA_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(24, fcst_len_hrs+1, 24) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->
    <envar><name>VAR</name><value>APCP</value></envar>
    <envar><name>ACCUM</name><value>24</value></envar>

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSGRID_APCP24h_TN;"/>
      </and>
    </dependency>

  </task>
  {%- endif %}
{%- endif %}


{#
OLD ensmeble point-based vx tasks that call gen_ens_prod and ensemble_stat
and then call point_stat to get the mean and probabilistic stats of the
ensemble.
#}
{%- if run_task_vx_enspoint %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSPOINT_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_enspoint }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSPOINT"</command>
    <nodes>{{ nnodes_vx_enspoint }}:ppn={{ ppn_vx_enspoint }}</nodes>
    <walltime>{{ wtime_vx_enspoint }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSPOINT_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSPOINT_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&NDAS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(0, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->

    <dependency>
  {%- if run_task_get_obs_ndas or run_task_run_post or is_ens_fcst %}
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
  {%- endif %}
  {%- if run_task_get_obs_ndas %}
        <taskdep task="&GET_OBS_NDAS_TN;"/>
  {%- endif %}
  {%- if run_task_run_post %}
    {%- for m in range(1, num_ens_members+1) -%}
      {%- set fmtstr="%0"~ndigits_ensmem_names~"d" %}
        <metataskdep metatask="&RUN_POST_TN;_{{ ensmem_indx_name }}{{- fmtstr%m -}}"/>
    {%- endfor %}
  {%- endif %}
<!--
The following dependecy isn't actually needed.  It is a way to throttle
the number of rocoto tasks (so that the deterministic verification tasks
in the run_ens_metatask complete before the ensemble verification tasks
can launch.  But the taskthrottle attribute should really be used for 
this purpose.
-->
  {%- if is_ens_fcst %}
        <metataskdep metatask="run_ens_mems"/>
  {%- endif %}
  {%- if run_task_get_obs_ndas or run_task_run_post or is_ens_fcst %}
      </and>
  {%- endif %}
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSPOINT_MEAN_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_enspoint_mean }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSPOINT_MEAN"</command>
    <nodes>{{ nnodes_vx_enspoint_mean }}:ppn={{ ppn_vx_enspoint_mean }}</nodes>
    <walltime>{{ wtime_vx_enspoint_mean }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSPOINT_MEAN_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSPOINT_MEAN_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&NDAS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(0, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSPOINT_TN;"/>
      </and>
    </dependency>

  </task>
<!--
************************************************************************
************************************************************************
-->
  <task name="&VX_ENSPOINT_PROB_TN;" cycledefs="forecast" maxtries="{{ maxtries_vx_enspoint_prob }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VX_ENSPOINT_PROB"</command>
    <nodes>{{ nnodes_vx_enspoint_prob }}:ppn={{ ppn_vx_enspoint_prob }}</nodes>
    <walltime>{{ wtime_vx_enspoint_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
  {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
  {%- endif %}
    <jobname>&VX_ENSPOINT_PROB_TN;</jobname>
    <join><cyclestr>&LOGDIR;/&VX_ENSPOINT_PROB_TN;_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBS_DIR</name><value>&NDAS_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
<!--   <envar><name>FHR</name><value><cyclestr>{% for h in range(0, fcst_len_hrs+1) %}{{ " %02d" % h }}{% endfor %} </cyclestr></value></envar> -->

    <dependency>
      <and>
        <streq><left>&VX_RUN_OLD_VXENS_TASKS;</left><right>TRUE</right></streq>
        <taskdep task="&VX_ENSPOINT_TN;"/>
      </and>
    </dependency>

  </task>

{%- endif %}

{%- endif %}








{%- if run_tasks_vxens %}
{#-
NEW
Generate vx tasks that call gen_ens_prod and ensemble_stat for all fields
to be verified (where some fields have gridded observations while others
have point-based observations).
#}
  {%- for field in vx_fields -%}
    {%- for accum in vx_apcp_accums_hrs -%}
{#- #}
      {%- set fmtstr = "%02d" %}
      {%- set accum2d_or_null = "" %}
      {%- set accum2dh_or_null = "" %}
{#-
Apparently need to intialize some variables here.
#}
      {%- set fieldname = "" %}
      {%- set obtype = "" %}
      {%- set run_task_get_obs = false %}
      {%- set create_gepes_gridded_task = false %}
      {%- set create_gepes_point_task = false %}
{#- #}
      {%- if (field == "APCP") %}
        {%- set obtype = "CCPA" %}
        {%- set run_task_get_obs = run_task_get_obs_ccpa %}
        {%- if (accum > 0) and (fcst_len_hrs >= accum) %}
          {%- set accum2d_or_null = fmtstr%accum %}
          {%- set accum2dh_or_null = accum2d_or_null ~ "h" %}
          {%- set create_gepes_gridded_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "REFC") or (field == "RETOP") %}
        {%- set obtype = "MRMS" %}
        {%- set run_task_get_obs = run_task_get_obs_mrms %}
        {%- if accum == 0 %}
          {%- set create_gepes_gridded_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "SFC") or (field == "UPA") %}
        {%- set obtype = "NDAS" %}
        {%- set run_task_get_obs = run_task_get_obs_ndas %}
        {%- if accum == 0 %}
          {%- set create_gepes_point_task = true %}
        {%- endif %}
      {%- endif %}
      {%- set fieldname = field ~ accum2dh_or_null %}
{#-
First, generate the vx tasks that run gen_ens_prod and ensemble_stat for
fields whose observations are gridded.
#}
      {%- if (create_gepes_gridded_task == true) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXENS_GEPES_GRIDDED_TN;_{{fieldname}}_cmn" cycledefs="forecast" maxtries="{{ maxtries_run_vxens_gepes_gridded }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXENS_GEPES_GRID_CMN"</command>
    <nodes>{{ nnodes_run_vxens_gepes_gridded }}:ppn={{ ppn_run_vxens_gepes_gridded }}</nodes>
    <walltime>{{ wtime_run_vxens_gepes_gridded }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
        {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
        {%- endif %}
    <jobname>&RUN_VXENS_GEPES_GRIDDED_TN;_{{fieldname}}_cmn</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXENS_GEPES_GRIDDED_TN;_{{fieldname}}_cmn_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>

    <dependency>
      <and>
{#-
Redundant dependency that will always evaluate to true.  This is included
because it helps simplify the coding in the jinja template of this xml
(because rocoto does not allow empty <dependency>, <and>, and other tags).
#}
        <streq><left>TRUE</left><right>TRUE</right></streq>
{#-
If the data fetching task for the current observation type is part of 
the workflow, make sure it has completed.
#}
        {%- if run_task_get_obs %}
        <taskdep task="&GET_OBS_{{obtype}}_TN;"/>
        {%- endif %}
{#-
If the forecast files are being generated by running the post-processor
UPP (as opposed to being staged), make sure that all ensemble forecast
member post-processing metatasks have completed.
#}
        {%- if run_task_run_post %}
          {%- for m in range(1, num_ens_members+1) -%}
            {%- set fmtstr="%0"~ndigits_ensmem_names~"d" %}
        <metataskdep metatask="&RUN_POST_TN;_{{ ensmem_indx_name }}{{- fmtstr%m -}}"/>
          {%- endfor %}
        {%- endif %}
{#-
For APCP with accumulation greater than 1 hour, the pcp_combine tasks
for both the observations and all ensemble member forecasts must be 
complete, so we include them here as dependencies.
#}
        {%- if (field == "APCP") and (accum > 1) %}
        <taskdep task="&RUN_VXAUX_PCPCOMBINE_OBS_TN;_{{fieldname}}"/>
          {%-for m in range(1, num_ens_members+1) %}
            {%- set fmtstr="%0"~ndigits_ensmem_names~"d" %}
            {%- set ensmem_name = ensmem_indx_name ~ fmtstr%m %}
        <taskdep task="&RUN_VXAUX_PCPCOMBINE_FCST_TN;_{{fieldname}}_{{ensmem_name}}"/>
          {%- endfor %}
        {%- endif %}

      </and>
    </dependency>

  </task>
      {%- endif %}
{#-
Now generate the vx tasks that run gen_ens_prod and ensemble_stat for
fields whose observations are point-based.
#}
      {%- if (create_gepes_point_task == true) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXENS_GEPES_POINT_TN;_{{fieldname}}_cmn" cycledefs="forecast" maxtries="{{ maxtries_run_vxens_gepes_point }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXENS_GEPES_POINT_CMN"</command>
    <nodes>{{ nnodes_run_vxens_gepes_point }}:ppn={{ ppn_run_vxens_gepes_point }}</nodes>
    <walltime>{{ wtime_run_vxens_gepes_point }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
        {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
        {%- endif %}
    <jobname>&RUN_VXENS_GEPES_POINT_TN;_{{fieldname}}_cmn</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXENS_GEPES_POINT_TN;_{{fieldname}}_cmn_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>

    <dependency>
      <and>
{#-
Make sure that the NDAS observations have been converted from prepbufr
to NetCDF format (via the RUN_VXAUX_PB2NC_OBS_TN task).  Note that there
is no need to check that the GET_OBS_NDAS_TN has completed because 
RUN_VXAUX_PB2NC_OBS_TN already has a dependency on it.
#}
        <taskdep task="&RUN_VXAUX_PB2NC_OBS_TN;"/>
{#-
If the forecast files are being generated by running the post-processor
UPP (as opposed to being staged), then make sure that all ensemble forecast
member post-processing metatasks have completed.
#}
        {%- if run_task_run_post %}
          {%- for m in range(1, num_ens_members+1) -%}
            {%- set fmtstr="%0"~ndigits_ensmem_names~"d" %}
        <metataskdep metatask="&RUN_POST_TN;_{{ ensmem_indx_name }}{{- fmtstr%m -}}"/>
          {%- endfor %}
        {%- endif %}
      </and>
    </dependency>

  </task>
      {%- endif %}

    {%- endfor %}
  {%- endfor %}



{#-
NEW
Generate vx tasks that calculate ensemble mean statistics for all fields
to be verified (where some fields have gridded observations while others
have point-based observations).
#}
  {%- for field in vx_fields -%}
    {%- for accum in vx_apcp_accums_hrs -%}
{#- #}
      {%- set fmtstr = "%02d" %}
      {%- set accum2d_or_null = "" %}
      {%- set accum2dh_or_null = "" %}
{#-
Apparently need to intialize some variables here.
#}
      {%- set fieldname = "" %}
      {%- set obtype = "" %}
      {%- set create_gridstat_mean_task = false %}
      {%- set create_pointstat_mean_task = false %}
{#- #}
      {%- if (field == "APCP") %}
        {%- set obtype = "CCPA" %}
        {%- if (accum > 0) and (fcst_len_hrs >= accum) %}
          {%- set accum2d_or_null = fmtstr%accum %}
          {%- set accum2dh_or_null = accum2d_or_null ~ "h" %}
          {%- set create_gridstat_mean_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "REFC") or (field == "RETOP") %}
        {%- set obtype = "MRMS" %}
        {%- if accum == 0 %}
          {%- set create_gridstat_mean_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "SFC") or (field == "UPA") %}
        {%- set obtype = "NDAS" %}
        {%- if accum == 0 %}
          {%- set create_pointstat_mean_task = true %}
        {%- endif %}
      {%- endif %}
      {%- set fieldname = field ~ accum2dh_or_null %}
{#-
First, generate the vx tasks that run grid_stat on the ensemble mean of
the appropriate field (or group of fields).
#}
      {%- if (create_gridstat_mean_task == true) %}
{#-
For REFC and RETOP, don't calculate ensemble mean statistics as these
are usually not of interest.
#}
        {%- if (field != "REFC") and (field != "RETOP") %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXENS_GRIDSTAT_TN;_{{fieldname}}_mean_cmn" cycledefs="forecast" maxtries="{{ maxtries_run_vxens_gridstat_mean }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXENS_GRIDSTAT_MEAN_CMN"</command>
    <nodes>{{ nnodes_run_vxens_gridstat_mean }}:ppn={{ ppn_run_vxens_gridstat_mean }}</nodes>
    <walltime>{{ wtime_run_vxens_gridstat_mean }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
        {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
        {%- endif %}
    <jobname>&RUN_VXENS_GRIDSTAT_TN;_{{fieldname}}_mean_cmn</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXENS_GRIDSTAT_TN;_{{fieldname}}_mean_cmn_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>

    <dependency>
      <and>
        <taskdep task="&RUN_VXENS_GEPES_GRIDDED_TN;_{{fieldname}}_cmn"/>
      </and>
    </dependency>

  </task>
        {%- endif %}
      {%- endif %}
{#-
Now generate the vx tasks that run point_stat on the ensemble mean of
the appropriate field (or group of fields).
#}
      {%- if (create_pointstat_mean_task == true) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXENS_POINTSTAT_TN;_{{fieldname}}_mean_cmn" cycledefs="forecast" maxtries="{{ maxtries_run_vxens_pointstat_mean }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXENS_POINTSTAT_MEAN_CMN"</command>
    <nodes>{{ nnodes_run_vxens_pointstat_mean }}:ppn={{ ppn_run_vxens_pointstat_mean }}</nodes>
    <walltime>{{ wtime_run_vxens_pointstat_mean }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
        {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
        {%- endif %}
    <jobname>&RUN_VXENS_POINTSTAT_TN;_{{fieldname}}_mean_cmn</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXENS_POINTSTAT_TN;_{{fieldname}}_mean_cmn_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>

    <dependency>
      <and>
{#-
Both the observation and forecast input files for this task will be ready
as long as RUN_VXENS_GEPES_POINT_TN;_{{fieldname}} task has completed
successfully (because the input files for that task are the same as for
this one).
#}
        <taskdep task="&RUN_VXENS_GEPES_POINT_TN;_{{fieldname}}_cmn"/>
      </and>
    </dependency>

  </task>
      {%- endif %}

    {%- endfor %}
  {%- endfor %}



{#-
NEW
Generate vx tasks that calculate ensemble probabilistic statistics for
all fields to be verified (where some fields have gridded observations
while others have point-based observations).
#}
  {%- for field in vx_fields -%}
    {%- for accum in vx_apcp_accums_hrs -%}
{#- #}
      {%- set fmtstr = "%02d" %}
      {%- set accum2d_or_null = "" %}
      {%- set accum2dh_or_null = "" %}
{#-
Apparently need to intialize some variables here.
#}
      {%- set fieldname = "" %}
      {%- set obtype = "" %}
      {%- set create_gridstat_prob_task = false %}
      {%- set create_pointstat_prob_task = false %}
{#- #}
      {%- if (field == "APCP") %}
        {%- set obtype = "CCPA" %}
        {%- if (accum > 0) and (fcst_len_hrs >= accum) %}
          {%- set accum2d_or_null = fmtstr%accum %}
          {%- set accum2dh_or_null = accum2d_or_null ~ "h" %}
          {%- set create_gridstat_prob_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "REFC") or (field == "RETOP") %}
        {%- set obtype = "MRMS" %}
        {%- if accum == 0 %}
          {%- set create_gridstat_prob_task = true %}
        {%- endif %}
{#- #}
      {%- elif (field == "SFC") or (field == "UPA") %}
        {%- set obtype = "NDAS" %}
        {%- if accum == 0 %}
          {%- set create_pointstat_prob_task = true %}
        {%- endif %}
      {%- endif %}
      {%- set fieldname = field ~ accum2dh_or_null %}
{#-
First, generate the vx tasks that run grid_stat to generate probabilistic
stats for the appropriate field (or group of fields).
#}
      {%- if (create_gridstat_prob_task == true) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXENS_GRIDSTAT_TN;_{{fieldname}}_prob_cmn" cycledefs="forecast" maxtries="{{ maxtries_run_vxens_gridstat_prob }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXENS_GRIDSTAT_PROB_CMN"</command>
    <nodes>{{ nnodes_run_vxens_gridstat_prob }}:ppn={{ ppn_run_vxens_gridstat_prob }}</nodes>
    <walltime>{{ wtime_run_vxens_gridstat_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
        {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
        {%- endif %}
    <jobname>&RUN_VXENS_GRIDSTAT_TN;_{{fieldname}}_prob_cmn</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXENS_GRIDSTAT_TN;_{{fieldname}}_prob_cmn_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>

    <dependency>
      <and>
        <taskdep task="&RUN_VXENS_GEPES_GRIDDED_TN;_{{fieldname}}_cmn"/>
      </and>
    </dependency>

  </task>
      {%- endif %}
{#-
Now generate the vx tasks that run point_stat to generate probabilistic
stats for the appropriate field (or group of fields).
#}
      {%- if (create_pointstat_prob_task == true) %}
<!--
************************************************************************
************************************************************************
-->
  <task name="&RUN_VXENS_POINTSTAT_TN;_{{fieldname}}_prob_cmn" cycledefs="forecast" maxtries="{{ maxtries_run_vxens_pointstat_prob }}">

    &RSRV_DEFAULT;
    <command>&LOAD_MODULES_RUN_TASK_FP; "&VX_TN;" "&JOBSDIR;/JREGIONAL_RUN_VXENS_POINTSTAT_PROB_CMN"</command>
    <nodes>{{ nnodes_run_vxens_pointstat_prob }}:ppn={{ ppn_run_vxens_pointstat_prob }}</nodes>
    <walltime>{{ wtime_run_vxens_pointstat_prob }}</walltime>
    <nodesize>&NCORES_PER_NODE;</nodesize>
        {%- if machine in ["GAEA"]  %}
    <native>&SLURM_NATIVE_CMD;</native>
        {%- endif %}
    <jobname>&RUN_VXENS_POINTSTAT_TN;_{{fieldname}}_prob_cmn</jobname>
    <join><cyclestr>&LOGDIR;/&RUN_VXENS_POINTSTAT_TN;_{{fieldname}}_prob_cmn_@Y@m@d@H.log</cyclestr></join>

    <envar><name>GLOBAL_VAR_DEFNS_FP</name><value>&GLOBAL_VAR_DEFNS_FP;</value></envar>
    <envar><name>OBTYPE</name><value>{{obtype}}</value></envar>
    <envar><name>OBS_DIR</name><value>&{{obtype}}_OBS_DIR;</value></envar>
    <envar><name>CYCLE_DIR</name><value><cyclestr>&CYCLE_BASEDIR;/@Y@m@d@H</cyclestr></value></envar>
    <envar><name>CDATE</name><value><cyclestr>@Y@m@d@H</cyclestr></value></envar>
    <envar><name>PDY</name><value><cyclestr>@Y@m@d</cyclestr></value></envar>
    <envar><name>cyc</name><value><cyclestr>@H</cyclestr></value></envar>
    <envar><name>VAR</name><value>{{field}}</value></envar>
    <envar><name>ACCUM</name><value>{{accum2d_or_null}}</value></envar>

    <dependency>
      <and>
{#-
Both the observation and forecast input files for this task will be ready
as long as RUN_VXENS_GEPES_POINT_TN;_{{fieldname}} task has completed
successfully (because the input files for that task are the same as for
this one).
#}
        <taskdep task="&RUN_VXENS_GEPES_POINT_TN;_{{fieldname}}_cmn"/>
      </and>
    </dependency>

  </task>
      {%- endif %}

    {%- endfor %}
  {%- endfor %}

{%- endif %}


</workflow>
